// Generated by Dagger (https://dagger.dev).
package com.ginzburgworks.remote_module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideTmdbApiFactory implements Factory<TmdbApi> {
  private final RemoteModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RemoteModule_ProvideTmdbApiFactory(RemoteModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public TmdbApi get() {
    return provideTmdbApi(module, retrofitProvider.get());
  }

  public static RemoteModule_ProvideTmdbApiFactory create(RemoteModule module,
      Provider<Retrofit> retrofitProvider) {
    return new RemoteModule_ProvideTmdbApiFactory(module, retrofitProvider);
  }

  public static TmdbApi provideTmdbApi(RemoteModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideTmdbApi(retrofit));
  }
}
