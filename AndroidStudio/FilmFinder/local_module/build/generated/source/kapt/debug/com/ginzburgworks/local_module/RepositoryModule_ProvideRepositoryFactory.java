// Generated by Dagger (https://dagger.dev).
package com.ginzburgworks.local_module;

import com.ginzburgworks.local_module.dao.FilmDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRepositoryFactory implements Factory<LocalRepository> {
  private final RepositoryModule module;

  private final Provider<FilmDao> filmDaoProvider;

  public RepositoryModule_ProvideRepositoryFactory(RepositoryModule module,
      Provider<FilmDao> filmDaoProvider) {
    this.module = module;
    this.filmDaoProvider = filmDaoProvider;
  }

  @Override
  public LocalRepository get() {
    return provideRepository(module, filmDaoProvider.get());
  }

  public static RepositoryModule_ProvideRepositoryFactory create(RepositoryModule module,
      Provider<FilmDao> filmDaoProvider) {
    return new RepositoryModule_ProvideRepositoryFactory(module, filmDaoProvider);
  }

  public static LocalRepository provideRepository(RepositoryModule instance, FilmDao filmDao) {
    return Preconditions.checkNotNullFromProvides(instance.provideRepository(filmDao));
  }
}
